{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let DocumentService = /*#__PURE__*/(() => {\n  class DocumentService {\n    //constructor(private http: HttpClient) { \n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.documents = [];\n      this.documentSelectedEvent = new EventEmitter();\n      //documentChangedEvent = new EventEmitter<Document[]>();\n      this.documentListChangedEvent = new Subject();\n      //this.documents = MOCKDOCUMENTS;\n      //this.maxDocumentId = this.getMaxId();\n    }\n    getDocuments() {\n      //this.http.get('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/documents.json')\n      //this.http.get('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/')\n      this.http.get('http://localhost:3000/documents')\n      //.subscribe((documents: Document[])=>{\n      .subscribe(documents => {\n        console.log(\"We are getting data\");\n        console.log(documents);\n        this.documents = documents.documents;\n        //this.documents = this.documents.splice(0, 3);\n        this.maxDocumentId = this.getMaxId();\n        console.log(\"this.maxDocumentId\");\n        console.log(this.maxDocumentId);\n        this.documents = this.documents.sort((currentElement, nextElement) => {\n          if (currentElement.name < nextElement.name) {\n            console.log(\"----------------------------------------\");\n            console.log(\"currentElement < nextElement\");\n            console.log(\"currentElement\");\n            console.log(currentElement);\n            console.log(\"nextElement\");\n            console.log(nextElement);\n            console.log(\"----------------------------------------\");\n            return -1;\n          } else if (currentElement.name > nextElement.name) {\n            console.log(\"==========================================\");\n            console.log(\"currentElement > nextElement\");\n            console.log(\"currentElement\");\n            console.log(currentElement);\n            console.log(\"nextElement\");\n            console.log(nextElement);\n            console.log(\"==========================================\");\n            return 1;\n          } else {\n            console.log(\"**********************************************\");\n            console.log(\"currentElement == nextElement\");\n            console.log(\"currentElement\");\n            console.log(currentElement);\n            console.log(\"nextElement\");\n            console.log(nextElement);\n            console.log(\"**********************************************\");\n            return 0;\n          }\n        });\n        this.documentListChangedEvent.next(this.documents.slice());\n        this.router.navigate(['/documents']);\n      }, error => {\n        console.log(error);\n      });\n      return this.documents.slice();\n    }\n    /*storeDocuments(){\n      const putData = JSON.stringify(this.documents);\n      const headers = new HttpHeaders({\"Content-Type\":\"application/json\"});\n      //this.http.put('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/documents.json', putData, {headers})\n      this.http.put('http://localhost:3000/documents', putData, {headers})\n      .subscribe(() => {\n        this.documents = this.documents.sort((currentElement, nextElement)=>{\n          if(currentElement.name < nextElement.name){\n            return -1;\n          } else if(currentElement.name > nextElement.name){\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        this.documentListChangedEvent.next(this.documents.slice());\n      })\n    }*/\n    getDocument(id) {\n      for (let i = 0; i < this.documents.length; i++) {\n        if (this.documents[i].id == id) {\n          return this.documents[i];\n        }\n      }\n      return null;\n    }\n    // deleteDocument method as it worked with FireBase\n    /*deleteDocument(document: Document) {\n      if (!document) {\n         return;\n      }\n      const pos = this.documents.indexOf(document);\n      if (pos < 0) {\n         return;\n      }\n      this.documents.splice(pos, 1);\n      //this.documentChangedEvent.emit(this.documents.slice());\n      this.storeDocuments();\n    }*/\n    // deleteDocument method implemented in a new way\n    deleteDocument(document) {\n      if (!document) {\n        return;\n      }\n      const pos = this.documents.findIndex(d => d.id === document.id);\n      if (pos < 0) {\n        return;\n      }\n      // delete from database\n      this.http.delete('http://localhost:3000/documents/' + document.id).subscribe(response => {\n        this.documents.splice(pos, 1);\n        //this.storeDocuments();\n        this.documentListChangedEvent.next(this.documents.slice());\n      });\n    }\n    getMaxId() {\n      let maxId = 0;\n      let currentId = 0;\n      this.documents.map(document => {\n        currentId = +document.id;\n        if (currentId > maxId) {\n          maxId = currentId;\n        }\n      });\n      return maxId;\n    }\n    // addDocument method as it worked with FireBase\n    /*addDocument(newDocument: Document){\n      if(!newDocument){\n        return;\n      }\n         this.maxDocumentId++;\n      newDocument.id = this.maxDocumentId.toString();\n      this.documents.push(newDocument);\n      let documentListClone = this.documents.slice();\n      this.storeDocuments();\n    }*/\n    // addDocument method implemented in a new way to make an HTTP POST request to NodeJS server to add the Document\n    // object passed as an argument to the documents collection in the MongoDB database server\n    addDocument(document) {\n      if (!document) {\n        return;\n      }\n      // make sure id of the new Document is empty\n      document.id = '';\n      console.log(\"inside service addDocument\");\n      console.log(document);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // add to database\n      this.http.post('http://localhost:3000/documents', document, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new document to documents\n        this.documents.push(responseData.document);\n        //this.sortAndSend();\n        //let documentListClone = this.documents.slice();\n        //this.storeDocuments();\n        this.documentListChangedEvent.next(this.documents.slice());\n      });\n    }\n    // updateDocument method as it worked with FireBase\n    /*updateDocument(originalDocument: Document, newDocument: Document) {\n      if(!originalDocument || !newDocument){\n        return;\n      }\n         let pos = this.documents.indexOf(originalDocument);\n      if(pos < 0){\n        return;\n      }\n         newDocument.id = originalDocument.id;\n      this.documents[pos] = newDocument;\n      let documentListClone = this.documents.slice();\n      this.storeDocuments();\n    }*/\n    // updateDocument method implemented in a new way to\n    updateDocument(originalDocument, newDocument) {\n      if (!originalDocument || !newDocument) {\n        return;\n      }\n      const pos = this.documents.findIndex(d => d.id === originalDocument.id);\n      if (pos < 0) {\n        return;\n      }\n      // set the id of the new Document to the id of the old Document\n      newDocument.id = originalDocument.id;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // update database\n      this.http.put('http://localhost:3000/documents/' + originalDocument.id, newDocument, {\n        headers: headers\n      }).subscribe(response => {\n        this.documents[pos] = newDocument;\n        //this.sortAndSend();\n        //this.storeDocuments();\n        this.documentListChangedEvent.next(this.documents.slice());\n      });\n    }\n    static {\n      this.ɵfac = function DocumentService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DocumentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DocumentService,\n        factory: DocumentService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DocumentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}