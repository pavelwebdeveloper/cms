{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.messagesChangedEvent = new EventEmitter();\n      this.messages = [];\n      //this.messages = MOCKMESSAGES;\n    }\n    getMessages() {\n      //this.http.get('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/messages.json')\n      //this.http.get('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/')\n      this.http.get('http://localhost:3000/messages')\n      //.subscribe((messages: Message[])=>{\n      .subscribe(messages => {\n        console.log(\"We are getting data\");\n        console.log(messages.messages);\n        this.messages = messages.messages;\n        //this.documents = this.documents.splice(0, 3);\n        /*this.maxMessageId = this.getMaxId();\n        console.log(\"this.maxDocumentId\");\n        console.log(this.maxMessageId);*/\n        this.messages = this.messages.sort((currentElement, nextElement) => {\n          if (+currentElement.sender < +nextElement.sender) {\n            return -1;\n          } else if (+currentElement.sender > +nextElement.sender) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        this.messagesChangedEvent.next(this.messages.slice());\n        this.router.navigate(['/messages']);\n      }, error => {\n        console.log(error);\n      });\n      return this.messages.slice();\n    }\n    /*storeMessages(){\n      const putData = JSON.stringify(this.messages);\n      const headers = new HttpHeaders({\"Content-Type\":\"application/json\"});\n      //this.http.put('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/messages.json', putData, {headers})\n      this.http.put('http://localhost:3000/messages', putData, {headers})\n      .subscribe(() => {\n        this.messages = this.messages.sort((currentElement, nextElement)=>{\n          if(+currentElement.sender < +nextElement.sender){\n            return -1;\n          } else if(+currentElement.sender > +nextElement.sender){\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        this.messagesChangedEvent.next(this.messages.slice());\n      })\n    }*/\n    /*getMessages(): Message[]{\n      return this.messages.slice();\n    }*/\n    getMessage(id) {\n      for (let i = 0; i < this.messages.length; i++) {\n        if (this.messages[i].id == id) {\n          return this.messages[i];\n        }\n      }\n      return null;\n    }\n    // addMessage method as it worked with FireBase\n    /*addMessage(message: Message){\n      console.log(message);\n      //this.messages.push(message);\n      //this.storeMessages();\n    }*/\n    // addMessage method implemented in a new way to make an HTTP POST request to NodeJS server to add the Message\n    // object passed as an argument to the messages collection in the MongoDB database server\n    addMessage(msg) {\n      console.log(msg);\n      if (!msg) {\n        return;\n      }\n      // make sure id of the new Document is empty\n      msg.id = '';\n      console.log(msg);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // add to database\n      this.http.post('http://localhost:3000/messages', msg, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new document to documents\n        this.messages.push(responseData.msg);\n        //this.sortAndSend();\n        //let documentListClone = this.documents.slice();\n        //this.storeMessages();\n        this.getMessages();\n        this.messagesChangedEvent.next(this.messages.slice());\n      });\n    }\n    static {\n      this.ɵfac = function MessageService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || MessageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: MessageService,\n        factory: MessageService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}