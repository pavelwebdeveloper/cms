{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    //maxContactId: number;\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.contacts = [];\n      this.contactSelectedEvent = new EventEmitter();\n      //contactChangedEvent = new EventEmitter<Contact[]>();\n      this.contactListChangedEvent = new Subject();\n      //this.contacts = MOCKCONTACTS;\n    }\n    getContacts() {\n      //this.http.get('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/contacts.json')\n      //this.http.get('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/')\n      this.http.get('http://localhost:3000/contacts')\n      //.subscribe((contacts: Contact[])=>{\n      .subscribe(contacts => {\n        console.log(\"We are getting data\");\n        console.log(contacts);\n        this.contacts = contacts.contacts;\n        //this.maxContactId = this.getMaxId();\n        //console.log(\"this.maxDocumentId\");\n        //console.log(this.maxContactId);\n        this.contacts = this.contacts.sort((currentElement, nextElement) => {\n          if (currentElement.name < nextElement.name) {\n            return -1;\n          } else if (currentElement.name > nextElement.name) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        this.contactListChangedEvent.next(this.contacts.slice());\n        //this.router.navigate(['/contacts']);\n      }, error => {\n        console.log(error);\n      });\n      return this.contacts.slice();\n    }\n    /*storeContacts(){\n      const putData = JSON.stringify(this.contacts);\n      const headers = new HttpHeaders({\"Content-Type\":\"application/json\"});\n      //this.http.put('https://cms-project-862f1-default-rtdb.europe-west1.firebasedatabase.app/contacts.json', putData, {headers})\n      this.http.put('http://localhost:3000/contacts', putData, {headers})\n      .subscribe(() => {\n        this.contacts = this.contacts.sort((currentElement, nextElement)=>{\n          if(currentElement.name < nextElement.name){\n            return -1;\n          } else if(currentElement.name > nextElement.name){\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n        this.contactListChangedEvent.next(this.contacts.slice());\n      })\n    }*/\n    getContact(id) {\n      for (let i = 0; i < this.contacts.length; i++) {\n        if (this.contacts[i].id == id) {\n          return this.contacts[i];\n        }\n      }\n      return null;\n    }\n    // deleteContact method as it worked with FireBase\n    /*deleteContact(contact: Contact) {\n     if (!contact) {\n       return;\n    }\n    const pos = this.contacts.indexOf(contact);\n    if (pos < 0) {\n       return;\n    }\n    this.contacts.splice(pos, 1);\n    this.storeContacts();\n     }*/\n    deleteContact(contact) {\n      if (!contact) {\n        return;\n      }\n      const pos = this.contacts.findIndex(c => c.id === contact.id);\n      if (pos < 0) {\n        return;\n      }\n      // delete from database\n      this.http.delete('http://localhost:3000/contacts/' + contact.id).subscribe(response => {\n        this.contacts.splice(pos, 1);\n        //this.storeContacts();\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n    }\n    /*getMaxId(): number{\n       let maxId = 0;\n      let currentId = 0;\n        \n       this.contacts.map((contact) => {\n          currentId = +contact.id;\n          if(currentId > maxId){\n            maxId = currentId;\n          }\n      });\n      \n      return maxId;\n    }*/\n    // addContact method as it worked with FireBase\n    /*addContact(newContact: Contact){\n      if(!newContact){\n        return;\n      }\n         this.maxContactId++;\n      newContact.id = this.maxContactId.toString();\n      this.contacts.push(newContact);\n      this.storeContacts();\n    }*/\n    // addContact method implemented in a new way to make an HTTP POST request to NodeJS server to add the Contact\n    // object passed as an argument to the contacts collection in the MongoDB database server\n    addContact(contact) {\n      if (!contact) {\n        return;\n      }\n      // make sure id of the new Document is empty\n      contact.id = '';\n      console.log(contact);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // add to database\n      this.http.post('http://localhost:3000/contacts', contact, {\n        headers: headers\n      }).subscribe(responseData => {\n        // add new document to documents\n        this.contacts.push(responseData.contact);\n        //this.sortAndSend();\n        //let documentListClone = this.documents.slice();\n        this.getContacts();\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n    }\n    // updateContact method as it worked with FireBase\n    /*updateContact(originalContact: Contact, newContact: Contact) {\n      if(!originalContact || !newContact){\n        return;\n      }\n         let pos = this.contacts.indexOf(originalContact);\n      if(pos < 0){\n        return;\n      }\n         newContact.id = originalContact.id;\n      this.contacts[pos] = newContact;\n      let documentListClone = this.contacts.slice();\n      this.storeContacts();\n    }*/\n    // updateContact method implemented in a new way to\n    updateContact(originalContact, newContact) {\n      if (!originalContact || !newContact) {\n        return;\n      }\n      const pos = this.contacts.findIndex(c => c.id === originalContact.id);\n      if (pos < 0) {\n        return;\n      }\n      // set the id of the new Document to the id of the old Document\n      newContact.id = originalContact.id;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // update database\n      this.http.put('http://localhost:3000/contacts/' + originalContact.id, newContact, {\n        headers: headers\n      }).subscribe(response => {\n        this.contacts[pos] = newContact;\n        //this.sortAndSend();\n        //this.storeContacts();\n        this.contactListChangedEvent.next(this.contacts.slice());\n      });\n    }\n    static {\n      this.ɵfac = function ContactService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ContactService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ContactService,\n        factory: ContactService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}